# given a list G of permutations on W=[0..n-1], find the orbitals of the 
# group generated by them, i.e. the orbits on WxW. This only needs O(GW^2) operations
def orbitals(G, result="comp", pairing=False):
  n = len(G[0])
  O = [[(i,j) for j in xrange(n)] for i in xrange(n)]

  for i in xrange(n): 
    for j in xrange(n):
      for g in G:
        s, t = g[i], g[j]
        # this does not preserve the natural pairing
        m = min(O[i][j], O[s][t])
        O[i][j], O[s][t] = m, m
  if result == "raw":
     return O
  d = [] 
  pa = dict()
  for i in xrange(n):
    for j in xrange(n):
      if O[i][j]==(i,j):
        d.append((i,j))
        if i<=j:
          pa[(i,j)]=O[j][i]
          pa[(j,i)]=O[i][j]
  if pairing == True:
     return d,pa
  else:  
     return d 
#  return [[O[i][j][0]*n+O[i][j][1] for j in range(n)] for i in range(n)]

# find the coefficients of expression of a sum of orbitals          
def mexpress(M,O,test=False):
  r = dict()
  if test==True:
    n = len(M[0])
    for i in xrange(n):
      for j in xrange(n):
        o = O[i][j]
        if o==(i,j):
          if M[i][j] != 0:
             r[(i,j)] = M[i][j]
        else:
          if M[i][j]!=M[o[0]][o[1]]:
             return False,i,j
    return r
  else:
    for i,j in O:
      if M[i][j] != 0:
        r[(i,j)] = M[i][j]
    return r
    
    
